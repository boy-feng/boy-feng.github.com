<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[船长_Jerry的博客]]></title>
  <link href="http://boy-feng.github.io/atom.xml" rel="self"/>
  <link href="http://boy-feng.github.io/"/>
  <updated>2014-01-24T15:19:30+08:00</updated>
  <id>http://boy-feng.github.io/</id>
  <author>
    <name><![CDATA[船长_Jerry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS 实现类似通讯录按拼音排序 - PinYin4Objc]]></title>
    <link href="http://boy-feng.github.io/blog/2014/01/24/pinyin-convert/"/>
    <updated>2014-01-24T10:15:15+08:00</updated>
    <id>http://boy-feng.github.io/blog/2014/01/24/pinyin-convert</id>
    <content type="html"><![CDATA[<p>最近项目中需要实现类似通讯录那样按拼音进行排序以及索引列表的显示的功能，我这里使用了 <code>PinYin4Objc</code> 这个库来实现此功能。</p>

<p><code>PinYinObjc</code>是一个效率很高的汉字转拼音类库，智齿简体和繁体中文，有如下特点：</p>

<p>1.效率高，使用数据缓存，第一次初始化以后，拼音数据存入文件缓存和内存缓存，后面转换效率大大提高；
2.支持自定义格式化，拼音大小写等等；
3.拼音数据完整，支持中文简体和繁体，与网络上流行的相关项目比，数据很全，几乎没有出现转换错误的问题。</p>

<p>下载 <a href="https://github.com/kimziv/PinYin4Objc">PinYinObjc</a></p>

<h1>项目中的实际应用</h1>

<h3>项目需求：</h3>

<p>显示一个班级的成员列表，有一个是管理员要排在最上面，下面按照拼音排序实现索引列表，效果图如下：</p>

<!--more-->


<p><img src="http://boy-feng.github.io/blog/images/pinyin_convert_1.png" alt="image" /></p>

<h3>代码实现过程</h3>

<p>查询数据库获取成员列表</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//成员列表根据 isAdmin 字段进行排序查询——order by isAdmin
</span><span class='line'>NSMutableArray *members = [[ASMemberDao sharedInstance] queryAllMembersByGroupId:groupId];
</span><span class='line'>//根据排序查询结果第一个为管理员
</span><span class='line'>ASContact *memeberAdmin = [members objectAtIndex:0];</span></code></pre></td></tr></table></div></figure>


<p>将每个成员的名字转化成拼音</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//初始化HanyuPinyinOutputFormat对象，设置相应的 type
</span><span class='line'>HanyuPinyinOutputFormat *outputFormat=[[HanyuPinyinOutputFormat alloc] init];
</span><span class='line'>[outputFormat setToneType:ToneTypeWithoutTone];
</span><span class='line'>[outputFormat setVCharType:VCharTypeWithV];
</span><span class='line'>[outputFormat setCaseType:CaseTypeUppercase];
</span><span class='line'>//遍历成员列表，将成员名字 contactName 转成拼音，并存放到 categoryName 字段中，用于排序
</span><span class='line'>[members enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
</span><span class='line'>    ASContact *contact = (ASContact *)obj;
</span><span class='line'>    NSString *outputPinyin=[PinyinHelper toHanyuPinyinStringWithNSString:contact.contactName withHanyuPinyinOutputFormat:outputFormat withNSString:@""];
</span><span class='line'>    contact.categoryName = [outputPinyin uppercaseString];
</span><span class='line'>}];
</span><span class='line'>[outputFormat release];</span></code></pre></td></tr></table></div></figure>


<p>将成员列表按照拼音字段 categoryName进行排序</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@"categoryName" ascending:YES];
</span><span class='line'>NSArray *array = [[NSArray alloc] initWithObjects:sortDescriptor, nil];
</span><span class='line'>[members sortUsingDescriptors:array];
</span><span class='line'>[array release];
</span><span class='line'>[sortDescriptor release];</span></code></pre></td></tr></table></div></figure>


<p>定义一个全局变量 dataDictionary 来组织数据结构</p>

<p><code>key: 将汉字转完拼音后的第一个字母, 也就是上图 section 中的 A、B、C...</code></p>

<p><code>value: 是一个成员数组，存放每个 section 下的成员列表</code></p>

<p>如上图： A 是字典的一个 Key, 对应的 value 就是成员数组 {af1, af10},当然数组中存放的是成员对象。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dataDictionary = [[NSMutableDictionary alloc] init];
</span><span class='line'>//存放每个 section 下的成员数组
</span><span class='line'>NSMutableArray *currentArray = nil;
</span><span class='line'>//用于获取拼音中第一个字母
</span><span class='line'>NSRange aRange = NSMakeRange(0, 1);
</span><span class='line'>NSString *firstLetter = nil;
</span><span class='line'>//遍历成员列表组织数据结构
</span><span class='line'>for (ASContact *contact in members) {
</span><span class='line'>    //如果是管理员，则暂时不放如 dataDictionary 中
</span><span class='line'>    if (contact.isAdmin == 1) {
</span><span class='line'>         continue;
</span><span class='line'>    }
</span><span class='line'>    //获取拼音中第一个字母，如果已经存在则直接将该成员加入到当前的成员数组中，如果不存在，创建成员数据，添加一个 key-value 结构到 dataDictionary 中
</span><span class='line'>    firstLetter = [contact.categoryName substringWithRange:aRange];
</span><span class='line'>    if ([dataDictionary objectForKey:firstLetter] == nil) {
</span><span class='line'>        currentArray = [NSMutableArray array];
</span><span class='line'>        [dataDictionary setObject:currentArray forKey:firstLetter];
</span><span class='line'>    }
</span><span class='line'>    [currentArray addObject:contact];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在定义一个全局变量 <code>allKeys</code> 用于显示索引列表中索引</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//取出 dataDictionary 中的 key 并进行排序
</span><span class='line'>allKeys = [[NSMutableArray alloc] initWithArray:[[dataDictionary allKeys] sortedArrayUsingFunction:sortObjectsByKey context:NULL]];
</span><span class='line'>//然后将管理员加入到排好序 allKeys 的最前面
</span><span class='line'>[allKeys insertObject:@"管理员" atIndex:0];
</span><span class='line'>[dataDictionary setObject:[NSArray arrayWithObjects:contactAdmin, nil] forKey:@"管理员"];</span></code></pre></td></tr></table></div></figure>


<p>最后就是通过 <code>allKeys</code> 和 <code>dataDictionary</code> 进行配置一下 tableview 的各个代理就 OK 了，这里不在赘述</p>

<p>希望对阅读本文的你有帮助</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建 Octopress 博客]]></title>
    <link href="http://boy-feng.github.io/blog/2014/01/18/test-blog/"/>
    <updated>2014-01-18T21:51:16+08:00</updated>
    <id>http://boy-feng.github.io/blog/2014/01/18/test-blog</id>
    <content type="html"><![CDATA[<p>很久之前就想搭建一个属于自己的blog，来分享自己成长路上的点点滴滴，最近看到了 Octopress，被他的风格深深吸引，简约大方，很符合我的口味 :)(:, 下面简单介绍一下它的安装过程（在 Mac 下，win 上没有尝试）：</p>

<h1>Github 帐号</h1>

<p>因为我们的 blog 是托管在 github 上的，所以第一步毫无疑问是注册 github 帐号，然后 create a Repository, 这里要给 repo 取一个名字，格式如下</p>

<p> <code>用户名.github.com</code></p>

<p> 创建完成后会得到一个 ssh 地址</p>

<p> <code>git@github.com:用户名/用户名.github.com.git</code></p>

<p> 这个地址是后面部署到我们本地的时候用的，暂且先将它记下</p>

<h1>搭建Octopress环境</h1>

<p>需要 ruby 和 git，Mac 上边是自带这两个工具的，在这里不做过多解释</p>

<p>下面开始安装 Octopress</p>

<!--more-->


<h3>一、将 Octopress 从github 上clone 到本地</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress //clone到 octopress 文件夹下，也可以是其他的
</span><span class='line'>cd octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<p>到目前为止Octopress安装完成，在这个过程中遇到的几个问题的</p>

<p><strong>问题1：  gem install bundler这一步出现问题</strong></p>

<p><code>Could not find a valid gem 'bundler' (&gt;= 0) in any repository</code></p>

<p>解决办法</p>

<p>检查是否 <code>https://rugygems.org/</code>作为 gems 的一个 source</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources
</span><span class='line'>*** CURRENT SOURCES ***
</span><span class='line'>https://rubygems.org/</span></code></pre></td></tr></table></div></figure>


<p>如果没有，则需要添加进去</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources --add https://rubygems.org/
</span><span class='line'>https://rubygems.org/ added to sources</span></code></pre></td></tr></table></div></figure>


<p>大功告成</p>

<p><strong>问题2： rake install 这一步出现问题</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake aborted!
</span><span class='line'>You have already activated rake 10.1.0, but your Gemfile requires rake 0.9.2.2. Prepending `bundle exec` to your command may solve this.</span></code></pre></td></tr></table></div></figure>


<p>解决办法</p>

<p>在 <code>rake install</code> 命令前加上 <code>bundle exec</code> 即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake install</span></code></pre></td></tr></table></div></figure>


<h3>二、注册 ssh 密钥到 github</h3>

<p>在终端输入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/.ssh
</span><span class='line'>ls -a</span></code></pre></td></tr></table></div></figure>


<p>这个时候一般没有 id_rsa和id_rsa.pub这两个文件，创建命令如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -t rsa -C "your email"</span></code></pre></td></tr></table></div></figure>


<p>这样我们就能看到这两个文件了，打开 id_rsa.pub将其复制然后打开这个网址 <a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a></p>

<p>add ssh key，title可以随便来写，key的话就是把复制的东西粘进去，搞定</p>

<h1>连接 github 和 Octopress 博客</h1>

<p>连接 github</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>这个时候会提示输入 ssh 地址，也就是上边我们记下的地址，输入后生成静态页面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>可以进行本地预览输入如下命令后，在浏览器中 <code>localhost:4000</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>将页面部署到github 上面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>最后同步远程库课本地库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -a -m "message"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>之后等一段时间，你就可以访问<code>用户名.github.com</code>这个网址看到你的 blog 了</p>

<p>在使用<code>rake</code>命令时如果遇到上边的<code>问题2</code> 处理方式相同，在命令前加上<code>bundle exec</code>即可</p>

<p>在这里可以修改<code>_config.yml</code>文件对博客进行简单配置，包括blog 的 title，subtitle，author 等等一些信息，修改后记得要同步哟</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -a -m "message"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h1>发布文章</h1>

<p>终于可以开始写 blog 了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new _post['title']</span></code></pre></td></tr></table></div></figure>


<p>输入命令以后， 在octopress/source/_post/里面就会生成一个 markdown 文件，打开文件就可以进行编辑了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>部署成功，访问一下 blog 网址，看看是不是已经有了一篇博客了</p>

<h1>其他</h1>

<p>如果想要进一步定制 octopress和一些高级配置，可以参见其他的一些 blog
<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a></p>

<p><a href="http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/">http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/</a></p>
]]></content>
  </entry>
  
</feed>
